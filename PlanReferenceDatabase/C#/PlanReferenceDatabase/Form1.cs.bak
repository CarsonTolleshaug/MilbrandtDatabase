using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;

namespace PlanReferenceDatabase
{
    public partial class Form1 : Form
    {
        List<SitePlan> _display;
        List<SitePlan> _sites;
        bool saved = false;
        public Form1()
        {
            InitializeComponent();
            LoadData();
            UpdateLists();
            ChangeLayout(false);
            wbPreview.Navigate("I:/Carson/Vars2.html?filename="
                + "Test.pdf" + "&width=" + wbPreview.Width + "&height=" + wbPreview.Height);
        }

        #region Utility Methods
        private void LoadData()
        {
            try
            {
                _sites = DataBase.Read();
            }
            catch
            {
                MessageBox.Show("Cannot Read File.");
                _sites = new List<SitePlan>();
            }
            _display = new List<SitePlan>(_sites);
        }
        /// <summary>
        /// Updates the DataGridView to 
        /// reflect any changes in the
        /// list of site plans, and
        /// Updates the combo boxes to
        /// contain all existing entry
        /// options.
        /// </summary>
        private void UpdateLists()
        {
            saved = false;
            //Populating Combo Boxes
            foreach (SitePlan s in _sites)
            {
                if (!cbProjNum.Items.Contains(s.ProjNumber))
                    cbProjNum.Items.Add(s.ProjNumber);
                if (!cbProjName.Items.Contains(s.ProjName))
                    cbProjName.Items.Add(s.ProjName);
                if (!cbClientName.Items.Contains(s.ClientName))
                    cbClientName.Items.Add(s.ClientName);
                if (!cbLocation.Items.Contains(s.Location))
                    cbLocation.Items.Add(s.Location);
                if (!cbPlan.Items.Contains(s.Plan))
                    cbPlan.Items.Add(s.Plan);
                if (!cbWidth.Items.Contains(s.Width))
                    cbWidth.Items.Add(s.Width);
                if (!cbDepth.Items.Contains(s.Depth))
                    cbDepth.Items.Add(s.Depth);
                if (!cbBeds.Items.Contains(s.Bedrooms))
                    cbBeds.Items.Add(s.Bedrooms);
                if (!cbBaths.Items.Contains(s.Baths))
                    cbBaths.Items.Add(s.Baths);
            }

            //Populating Data Grid View
            if (_display.Count != 0)
            {
                dgList.RowCount = _display.Count;
                for (int i = 0; i < _display.Count; i++)
                {
                    SitePlan s = _display[i];
                    dgList.Rows[i].SetValues(s.ProjNumber, s.ProjName, s.ClientName,
                        s.Location, s.Plan, s.Width, s.Depth, s.Bedrooms, s.Baths, s.Sqrft);
                }
            }
            else
            {
                dgList.RowCount = 1;
                dgList.Rows[0].SetValues("", "", "", "", "", "", "", "", "", "");
            }
        }
        /// <summary>
        /// Switches the layout of the form
        /// between "search mode" and "edit
        /// mode".
        /// </summary>
        /// <param name="edit">Determines
        /// if the layout should be switched
        /// to "search mode" or "edit mode".
        /// </param>
        private void ChangeLayout(bool edit)
        {            
            dgList.MultiSelect = !edit;
            btnEdit.Enabled = btnCreate.Enabled = btnOpen.Enabled = !edit;
            gbEdit.Enabled = edit;
            gbEdit.Visible = true;

            if (edit)
            {
                cbProjNum.DropDownStyle =
                    cbProjName.DropDownStyle =
                    cbClientName.DropDownStyle =
                    cbLocation.DropDownStyle =
                    cbPlan.DropDownStyle =
                    cbWidth.DropDownStyle =
                    cbDepth.DropDownStyle = 
                    cbBeds.DropDownStyle =
                    cbBaths.DropDownStyle = ComboBoxStyle.DropDown;
                cbSqrft.DropDownStyle = ComboBoxStyle.Simple;

                cbProjName.Text = "New Plan Reference";
                cbSqrft.Text = "";

                if (cbProjName.Items.Count != 0 && cbProjName.Items[0].ToString() == "Any")
                {
                    cbProjNum.Items.RemoveAt(0);
                    cbProjName.Items.RemoveAt(0);
                    cbClientName.Items.RemoveAt(0);
                    cbLocation.Items.RemoveAt(0);
                    cbPlan.Items.RemoveAt(0);
                    cbWidth.Items.RemoveAt(0);
                    cbDepth.Items.RemoveAt(0);
                    cbBeds.Items.RemoveAt(0);
                    cbBaths.Items.RemoveAt(0);
                }
            }
            else
            {
                cbProjNum.DropDownStyle =
                    cbProjName.DropDownStyle =
                    cbClientName.DropDownStyle =
                    cbLocation.DropDownStyle =
                    cbPlan.DropDownStyle =
                    cbWidth.DropDownStyle =
                    cbDepth.DropDownStyle =
                    cbBeds.DropDownStyle =
                    cbBaths.DropDownStyle =
                    cbSqrft.DropDownStyle = ComboBoxStyle.DropDownList;

                if (cbProjName.Items.Count == 0 || cbProjName.Items[0].ToString() != "Any")
                {
                    cbProjNum.Items.Insert(0, "Any");
                    cbProjName.Items.Insert(0, "Any");
                    cbClientName.Items.Insert(0, "Any");
                    cbLocation.Items.Insert(0, "Any");
                    cbPlan.Items.Insert(0, "Any");
                    cbWidth.Items.Insert(0, "Any");
                    cbDepth.Items.Insert(0, "Any");
                    cbBeds.Items.Insert(0, "Any");
                    cbBaths.Items.Insert(0, "Any");
                }

                cbProjNum.SelectedIndex =
                    cbProjName.SelectedIndex =
                    cbClientName.SelectedIndex =
                    cbLocation.SelectedIndex =
                    cbPlan.SelectedIndex =
                    cbWidth.SelectedIndex =
                    cbDepth.SelectedIndex =
                    cbBeds.SelectedIndex =
                    cbBaths.SelectedIndex =
                    cbSqrft.SelectedIndex = 0;
                txtFile.Text = "";
            }
        }
        /// <summary>
        /// Sets the values stored in the
        /// selected SitePlan to the combo
        /// boxes.
        /// </summary>
        private void SetValuesToComboBoxes()
        {
            if (dgList.SelectedRows.Count > 0 && _display.Count > 0)
            {
                SitePlan s = _display[dgList.SelectedRows[0].Index];
                cbProjNum.Text = s.ProjNumber;
                cbProjName.Text = s.ProjName;
                cbClientName.Text = s.ClientName;
                cbLocation.Text = s.Location;
                cbPlan.Text = s.Plan;
                cbWidth.Text = s.Width;
                cbDepth.Text = s.Depth;
                cbBeds.Text = s.Bedrooms;
                cbBaths.Text = s.Baths;
                cbSqrft.Text = s.Sqrft;
                txtFile.Text = s.LinkPath;
            }
        }
        /// <summary>
        /// Sets the values stored in the
        /// combo boxes to the SitePlan
        /// selected.
        /// </summary>
        private void SetValuesToData()
        {
            if (dgList.SelectedRows.Count > 0 && _display.Count > 0)
            {
                SitePlan s = _display[dgList.SelectedRows[0].Index];
                s.ProjNumber = cbProjNum.Text;
                s.ProjName = cbProjName.Text;
                s.ClientName = cbClientName.Text;
                s.Location = cbLocation.Text;
                s.Plan = cbPlan.Text;
                s.Width = cbWidth.Text;
                s.Depth = cbDepth.Text;
                s.Bedrooms = cbBeds.Text;
                s.Baths = cbBaths.Text;
                s.Sqrft = cbSqrft.Text;
                s.LinkPath = txtFile.Text;
            }
        }
        private void ClearComboBoxes()
        {
            cbProjNum.Items.Clear();
            cbProjName.Items.Clear();
            cbClientName.Items.Clear();
            cbLocation.Items.Clear();
            cbPlan.Items.Clear();
            cbWidth.Items.Clear();
            cbDepth.Items.Clear();
            cbBeds.Items.Clear();
            cbBaths.Items.Clear();
        }
        private bool SaveChanges()
        {
            try
            {
                DataBase.Write(_sites);
                MessageBox.Show("Save Complete.");
                saved = true;
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Save Failed. " + ex.Message);
                return false;
            }
        }
        #endregion

        //Called whenever any of the combo boxes'
        //SelectedIndexChanged event is raised.
        private void Search(object sender, EventArgs e)
        {
            try
            {
                //only preform code if not in "edit mode"
                if (!gbEdit.Enabled)
                {
                    //creates an object to contain the search specifications
                    SitePlan query = new SitePlan(cbProjNum.Text, cbProjName.Text, cbClientName.Text, 
                        cbLocation.Text, cbPlan.Text, cbWidth.Text, cbDepth.Text, cbBeds.Text, cbBaths.Text, cbSqrft.Text, "");
                    foreach (SitePlan s in _sites)
                    {
                        //If a site does not meet the search
                        //criteria, and is in the list, remove
                        //it. If a site does meet the criteria and
                        //is not in the lis add it. Otherwise,
                        //do nothing.
                        bool isEqual = query.IsEqualTo(s);
                        if (!isEqual && _display.Contains(s))
                            _display.Remove(s);
                        if (isEqual && !_display.Contains(s))
                            _display.Add(s);
                    }
                    UpdateLists();
                }
            }
            catch { }
        }
        private void ChangeDatabase_Clicked(object sender, EventArgs e)
        {
            if (!saved)
            {
                DialogResult result = MessageBox.Show("Would you like to save before switching databases?\nAny Changes will be lost.", "Save Changes", MessageBoxButtons.YesNoCancel);
                switch (result)
                {
                    //if the save is unsuccessful, 
                    //the new form will not appear
                    case DialogResult.Yes:  
                        if (SaveChanges())
                            break;
                        else
                            return;
                    case DialogResult.Cancel:
                        return;
                    default:
                        break;
                }
            }

            ChangeDataForm cdf = new ChangeDataForm();
            cdf.ShowDialog();
            if (cdf.Result != DialogResult.Cancel)
            {
                ClearComboBoxes();
                LoadData();
                ChangeLayout(false);
            }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            SaveChanges();
        }
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {            
            this.Close();
        }

        private void btnOpen_Click(object sender, EventArgs e)
        {
            //calls 'Open' on all selected objects
            if (_display.Count > 0)
                foreach (DataGridViewRow d in dgList.SelectedRows)
                    _display[d.Index].Open();
        }
        private void btnCreate_Click(object sender, EventArgs e)
        {
            //Add a new site (the same new site)
            //to both the list of sites and the
            //list of displayed sites.
            SitePlan addSite = new SitePlan();
            _sites.Add(addSite);
            _display.Add(addSite);

            UpdateLists();
            ChangeLayout(true);
            SetValuesToComboBoxes();
            //sets the selection to the last row which is
            //the newly created SitePlan.
            dgList.Rows[_display.Count - 1].Selected = true;
        }
        private void btnEdit_Click(object sender, EventArgs e)
        {
            if (dgList.SelectedRows.Count > 0 && _display.Count > 0)
            {
                //Uses the first selected row if multiple rows
                //are selected.
                int index = dgList.SelectedRows[0].Index;
                ChangeLayout(true);
                dgList.Rows[index].Selected = true;
                SetValuesToComboBoxes();
            }
        }

        private void btnRemove_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("Are you sure you want to remove this entry?", "", MessageBoxButtons.YesNo);
            if (result == DialogResult.No)
                return;

            try
            {
                int index = dgList.SelectedRows[0].Index;
                SitePlan removeSite = _display[index];
                _sites.Remove(removeSite);
                _display.Remove(removeSite);
                ClearComboBoxes();
                UpdateLists();
                ChangeLayout(false);
                dgList.ClearSelection();
                ////If the last row is selected to be deleted,
                ////the new selection must be that index - 1.
                ////If its not, or there are no more rows, then
                ////keep the index the same.
                //if (_display.Count == index && _display.Count > 0)
                //    dgList.Rows[index - 1].Selected = true;
                //else
                //    dgList.Rows[index].Selected = true;
            }
            catch (ArgumentOutOfRangeException)
            {
                MessageBox.Show("Cannot delete entry: \nIt is already empty.");
            }
        }
        private void btnUpdate_Click(object sender, EventArgs e)
        {
            SetValuesToData();
            ClearComboBoxes();
            UpdateLists();
            ChangeLayout(false);
            dgList.ClearSelection();
        }
        private void btnCancel_Click(object sender, EventArgs e)
        {
            ChangeLayout(false);
            dgList.ClearSelection();
        }

        private void dgList_SelectionChanged(object sender, EventArgs e)
        {
            if (gbEdit.Enabled)
                SetValuesToComboBoxes();

            //if (dgList.SelectedRows.Count > 0 && _display.Count > 0)
            //{
            //    string path = _display[dgList.SelectedRows[0].Index].LinkPath;
            //Uri url = new Uri("I:/Carson/Documents/Visual Studio 2008/Projects/PlanReferenceDatabase/PlanReferenceDatabase/test.html");
            //wbPreview.Url = url;
            //}                       
        }
        private void dgList_RowValidating(object sender, DataGridViewCellCancelEventArgs e)
        {
            if (gbEdit.Enabled && dgList.SelectedRows[0].Index < _display.Count)
            {
                SetValuesToData();
                UpdateLists();
            }
        }
        private void dgList_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
        {
            //the placement of each control is determined by the end of the previous control
            //the width is determined by the column width
            const int spacing = 5;
            lblProjNum.Left = cbProjNum.Left = dgList.Left;
            cbProjNum.Width = dgList.Columns[0].Width - spacing;

            lblProjName.Left = cbProjName.Left = cbProjNum.Right + spacing;
            cbProjName.Width = dgList.Columns[1].Width - spacing;

            lblClient.Left = cbClientName.Left = cbProjName.Right + spacing;
            cbClientName.Width = dgList.Columns[2].Width - spacing;

            lblLocation.Left = cbLocation.Left = cbClientName.Right + spacing;
            cbLocation.Width = dgList.Columns[3].Width - spacing;

            lblPlan.Left = cbPlan.Left = cbLocation.Right + spacing;
            cbPlan.Width = dgList.Columns[4].Width - spacing;

            lblWidth.Left = cbWidth.Left = cbPlan.Right + spacing;
            cbWidth.Width = dgList.Columns[5].Width - spacing;

            lblDepth.Left = cbDepth.Left = cbWidth.Right + spacing;
            cbDepth.Width = dgList.Columns[6].Width - spacing;

            lblBeds.Left = cbBeds.Left = cbDepth.Right + spacing;
            cbBeds.Width = dgList.Columns[7].Width - spacing;

            lblBaths.Left = cbBaths.Left = cbBeds.Right + spacing;
            cbBaths.Width = dgList.Columns[8].Width - spacing;

            lblSqrft.Left = cbSqrft.Left = cbBaths.Right + spacing;
            cbSqrft.Width = dgList.Columns[9].Width - spacing;

            if (cbSqrft.Right - dgList.Left > ListArea.Width)
                dgList.Width = cbSqrft.Right - dgList.Left;
            else
                dgList.Width = ListArea.Width;
        }

        private void btnBrowse_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            DialogResult result = ofd.ShowDialog();
            if (result != DialogResult.Cancel)
                txtFile.Text = ofd.FileName;
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!saved)
            {
                DialogResult result = MessageBox.Show("Would you like to save your changes before exiting?", "Save Changes", MessageBoxButtons.YesNoCancel);
                if (result == DialogResult.Yes)
                {
                    //if the save is unsuccessful, 
                    //the form will not close
                    e.Cancel = !SaveChanges();
                }
                else
                    e.Cancel = result == DialogResult.Cancel;
            }
        }
    }
}
